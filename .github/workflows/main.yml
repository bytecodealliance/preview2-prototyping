name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # Check Code style quickly by running `rustfmt` over all code
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup update stable && rustup default stable
    - run: rustup component add rustfmt
    - run: cargo fmt --all -- --check

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - build: ubuntu-latest
            os: ubuntu-latest
          - build: windows-latest
            os: windows-latest
          - build: macos-latest
            os: macos-latest
    steps:
    - uses: actions/checkout@v3
      # TODO: Remove +nightly once lambda-fairy/rust-errno#66 is released and
      # rust-lang/rust#105395 reaches stable.
      # TODO: Remove pin to 2023-03-14 once rust-lang/rust#109199 is released.
      # TODO: Also remove it in test-programs/macros/build.rs
    - run: rustup update nightly-2023-03-14
    - run: rustup default nightly-2023-03-14
    - run: rustup target add --toolchain=stable wasm32-wasi wasm32-unknown-unknown
    - run: rustup target add --toolchain=nightly-2023-03-14 wasm32-wasi wasm32-unknown-unknown

      # Debug build, default features (reactor)
    - run: cargo build --target wasm32-unknown-unknown
    - run: cargo run -p verify -- ./target/wasm32-unknown-unknown/debug/wasi_snapshot_preview1.wasm

      # Debug build, command
    - run: cargo build --target wasm32-unknown-unknown --no-default-features --features command
    - run: cargo run -p verify -- ./target/wasm32-unknown-unknown/debug/wasi_snapshot_preview1.wasm

      # Release build, default features (reactor)
    - run: cargo build --release --target wasm32-unknown-unknown
    - run: cargo run -p verify -- ./target/wasm32-unknown-unknown/release/wasi_snapshot_preview1.wasm

      # Release build, command
    - run: cargo build --release --target wasm32-unknown-unknown --no-default-features --features command
    - run: cargo run -p verify -- ./target/wasm32-unknown-unknown/release/wasi_snapshot_preview1.wasm

    - run: cargo test -p host

  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      deployments: write
      contents: write
    steps:
    - uses: actions/checkout@v3
    - run: rustup update stable && rustup default stable
    - run: rustup target add wasm32-wasi wasm32-unknown-unknown

    - run: |
        curl -L https://github.com/bytecodealliance/wasm-tools/releases/download/wasm-tools-1.0.27/wasm-tools-1.0.27-x86_64-linux.tar.gz | tar xfz -
        echo `pwd`/wasm-tools-1.0.27-x86_64-linux >> $GITHUB_PATH

    # Release build, command
    - run: cargo build --target wasm32-unknown-unknown --release --no-default-features --features command
    - run: wasm-tools metadata add --name "wasi_snapshot_preview1.command.adapter:${GITHUB_SHA}" target/wasm32-unknown-unknown/release/wasi_snapshot_preview1.wasm -o wasi_snapshot_preview1.command.wasm
    - uses: actions/upload-artifact@v3
      with:
        name: wasi_snapshot_preview1.command.wasm
        path: wasi_snapshot_preview1.command.wasm

    # Release build, default features (reactor)
    - run: cargo build --target wasm32-unknown-unknown --release
    - run: wasm-tools metadata add --name "wasi_snapshot_preview1.reactor.adapter:${GITHUB_SHA}" target/wasm32-unknown-unknown/release/wasi_snapshot_preview1.wasm -o wasi_snapshot_preview1.reactor.wasm
    - uses: actions/upload-artifact@v3
      with:
        name: wasi_snapshot_preview1.reactor.wasm
        path: target/wasm32-unknown-unknown/release/wasi_snapshot_preview1.reactor.wasm

    - run: |
        wasm-tools component embed --dummy ./wit/ -w command -o ./dummy_command.wasm
        wasm-tools component new -o ./dummy_command.component.wasm ./dummy_command.wasm
        wasm-tools print ./dummy_command.component.wasm
    - uses: actions/upload-artifact@v3
      with:
        name: dummy_command.component.wasm
        path: dummy_command.component.wasm
    - run: |
        wasm-tools component embed --dummy ./wit/ -w proxy -o ./dummy_proxy.wasm
        wasm-tools component new -o ./dummy_proxy.component.wasm ./dummy_proxy.wasm
        wasm-tools print ./dummy_proxy.component.wasm
    - uses: actions/upload-artifact@v3
      with:
        name: dummy_proxy.component.wasm
        path: dummy_proxy.component.wasm
    - run: |
        wasm-tools component embed --dummy ./wit/ -w reactor -o ./dummy_reactor.wasm
        wasm-tools component new -o ./dummy_reactor.component.wasm ./dummy_reactor.wasm
        wasm-tools print ./dummy_reactor.component.wasm
    - uses: actions/upload-artifact@v3
      with:
        name: dummy_reactor.component.wasm
        path: dummy_reactor.component.wasm

    - run: |
        curl -L https://github.com/bytecodealliance/wit-bindgen/releases/download/wit-bindgen-cli-0.4.0/wit-bindgen-v0.4.0-x86_64-linux.tar.gz | tar xfz -
        echo `pwd`/wit-bindgen-v0.4.0-x86_64-linux >> $GITHUB_PATH
    - run: wit-bindgen c ./wit --world command
    - uses: actions/upload-artifact@v3
      with:
        name: cli.c
        path: cli.c
    - uses: actions/upload-artifact@v3
      with:
        name: cli.h
        path: cli.h
    - uses: actions/upload-artifact@v3
      with:
        name: cli_component_type.o
        path: cli_component_type.o
    - run: wit-bindgen rust ./wit --world command
    - uses: actions/upload-artifact@v3
      with:
        name: cli.rs
        path: cli.rs

    - uses: marvinpinto/action-automatic-releases@latest
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        automatic_release_tag: latest
        prerelease: true
        title: "Latest Build"
        files: |
          wasi_snapshot_preview1.reactor.wasm
          wasi_snapshot_preview1.command.wasm
          cli.c
          cli.h
          cli_component_type.o
          cli.rs
          dummy_command.component.wasm
          dummy_proxy.component.wasm
          dummy_reactor.component.wasm
