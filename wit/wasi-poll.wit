/// # WASI Poll API
///
/// WASI Poll is a poll API intended to let users wait for I/O events on
/// multiple handles at once.
default interface wasi-poll {
  use pkg.wasi-clocks.{wall-clock, monotonic-clock, datetime, instant}

  /// A "pseudo-future".
  ///
  /// This conceptually represents a `future<_>`, and serves as temporary
  /// scaffolding until component-model's async features are ready.
  ///
  /// In the shorter term, it is a `u32` which will be replaced by a handle
  /// when the component-model handles and resource features are ready.
  ///
  /// Pseudo-future lifetimes are not automatically managed. Users must
  /// ensure that they do not outlive the resource they reference.
  type wasi-future = u32

  /// A "pseudo-stream".
  ///
  /// This conceptually represents a `stream<u8, _>`, and serves as temporary
  /// scaffolding until component-model's async features are ready.
  ///
  /// In the shorter term, it is a `u32` which will be replaced by a handle
  /// when the component-model handles and resource features are ready.
  type wasi-stream = u32

  /// Dispose of the specified future, after which it may no longer be used.
  drop-future: func(f: wasi-future)

  /// Dispose of the specified stream, after which it may no longer be used.
  drop-stream: func(f: wasi-stream)

  /// Size of a range of bytes in memory.
  type size = u32

  /// FIXME: This should just be `_` in the `result`'s below, but in the
  /// bindings, `()` doesn't impl `std::error::Error`.
  record stream-error {}

  /// Read bytes from a stream.
  read-stream: func(
      /// The stream to operate on.
      %stream: wasi-stream,
      /// The maximum number of bytes to read.
      len: size,
  ) -> result<tuple<list<u8>, bool>, stream-error>

  /// Write bytes to a stream.
  write-stream: func(
      /// The stream to operate on.
      %stream: wasi-stream,
      /// Data to write
      buf: list<u8>,
  ) -> result<size, stream-error>

  /// Skip bytes from a stream.
  skip-stream: func(
      /// The stream to operate on.
      %stream: wasi-stream,
      /// The maximum number of bytes to skip.
      len: u64,
  ) -> result<tuple<u64, bool>, stream-error>

  /// Write a byte multiple times to a stream.
  write-repeated-stream: func(
      /// The stream to operate on.
      %stream: wasi-stream,
      /// The byte to write
      byte: u8,
      /// The number of times to write it.
      len: u64,
  ) -> result<u64, stream-error>

  /// Read from one stream and write to another.
  splice-stream: func(
      /// The stream to read from.
      src: wasi-stream,
      /// The stream to write to.
      dst: wasi-stream,
      /// The number of bytes to splice.
      len: u64,
  ) -> result<tuple<u64, bool>, stream-error>

  /// Create a future which will resolve once either the specified stream has bytes
  /// available to read or the other end of the stream has been closed.
  subscribe-read: func(s: wasi-stream) -> wasi-future

  /// Create a future which will resolve once either the specified stream is ready
  /// to accept bytes or the other end of the stream has been closed.
  subscribe-write: func(s: wasi-stream) -> wasi-future

  /// Create a future which will resolve once the specified time has been reached.
  subscribe-monotonic-clock: func(clock: monotonic-clock, when: instant, absolute: bool) -> wasi-future

  /// Poll for completion on a set of futures.
  ///
  /// The "oneoff" in the name refers to the fact that this function must do a
  /// linear scan through the entire list of subscriptions, which may be
  /// inefficient if the number is large and the same subscriptions are used
  /// many times. In the future, it may be accompanied by an API similar to
  /// Linux's `epoll` which allows sets of subscriptions to be registered and
  /// made efficiently reusable.
  ///
  /// Note that the return type would ideally be `list<bool>`, but that would
  /// be more difficult to polyfill given the current state of `wit-bindgen`.
  /// See https://github.com/bytecodealliance/preview2-prototyping/pull/11#issuecomment-1329873061
  /// for details.  For now, we use zero to mean "not ready" and non-zero to
  /// mean "ready".
  poll-oneoff: func(in: list<wasi-future>) -> list<u8>
}
