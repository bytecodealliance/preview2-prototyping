interface command {
  type descriptor = u32
  command: func(stdin: descriptor, stdout: descriptor, args: list<string>)
}

/// # WASI Clocks API
///
/// WASI Clocks is a clock API intended to let users query the current time and
/// to measure elapsed time.
///
/// It is intended to be portable at least between Unix-family platforms and
/// Windows.
interface wasi-clocks {
  /// A monotonic clock is a clock which has an unspecified initial value, and
  /// successive reads of the clock will produce non-decreasing values.
  ///
  /// It is intended for measuring elapsed time.
  type monotonic-clock = u32

  /// A wall clock is a clock which measures the date and time according to some
  /// external reference.
  ///
  /// External references may be reset, so this clock is not necessarily
  /// monotonic, making it unsuitable for measuring elapsed time.
  ///
  /// It is intended for reporting the current date and time for humans.
  type wall-clock = u32

  /// This is a timer that counts down from a given starting time down to zero
  /// on a monotonic clock.
  type monotonic-timer = u32

  /// A timestamp in nanoseconds.
  type instant = u64

  /// A time and date in seconds plus nanoseconds.
  record datetime {
      seconds: u64,
      nanoseconds: u32,
  }

  /// An asynchronous operation. In the future, this will be replaced by a handle type.
  /// TODO: `use` the `wasi-poll` version
  type wasi-future = u32

  /// Create a future which will resolve once the specified time has been reached.
  subscribe-wall-clock: func(when: datetime, absolute: bool) -> wasi-future

  /// Create a future which will resolve once the specified time has been reached.
  subscribe-monotonic-clock: func(when: instant, absolute: bool) -> wasi-future

  /// Read the current value of the clock.
  ///
  /// As this the clock is monotonic, calling this function repeatedly will produce
  /// a sequence of non-decreasing values.
  monotonic-clock-now: func(fd: monotonic-clock) -> instant

  /// Query the resolution of the clock.
  monotonic-clock-resolution: func(fd: monotonic-clock) -> instant

  /// This creates a new `monotonic-timer` with the given starting time. It will
  /// count down from this time until it reaches zero.
  monotonic-clock-new-timer: func(fd: monotonic-clock, initial: instant) -> monotonic-timer

  /// Read the current value of the clock.
  ///
  /// As this the clock is not monotonic, calling this function repeatedly will
  /// not necessarily produce a sequence of non-decreasing values.
  ///
  /// The returned timestamps represent the number of seconds since
  /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch], also
  /// known as [Unix Time].
  ///
  /// The nanoseconds field of the output is always less than 1000000000.
  ///
  /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
  /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
  wall-clock-now: func(fd: wall-clock) -> datetime

  /// Query the resolution of the clock.
  ///
  /// The nanoseconds field of the output is always less than 1000000000.
  wall-clock-resolution: func(fd: wall-clock) -> datetime

  /// Returns the amount of time left before this timer reaches zero.
  monotonic-timer-current: func(fd: monotonic-timer) -> instant
}

/// # WASI Default Clocks API
///
/// WASI Default Clocks provides value-exports of clock handles for monotonic
/// and a wall-clock time, suitable for general-purpose application needs.
interface wasi-default-clocks {
  //use { monotonic-clock, wall-clock } from wasi-clocks
  type monotonic-clock = u32
  type wall-clock = u32

  default-monotonic-clock: func() -> monotonic-clock
  default-wall-clock: func() -> wall-clock
}

/// # WASI Logging API
///
/// WASI Logging is a logging API intended to let users emit log messages with
/// simple priority levels and context values.
interface wasi-logging {
  /// A log level, describing a kind of message.
  enum level {
     /// Describes messages about the values of variables and the flow of control
     /// within a program.
     trace,

     /// Describes messages likely to be of interest to someone debugging a program.
     debug,

     /// Describes messages likely to be of interest to someone monitoring a program.
     info,

     /// Describes messages indicating hazardous situations.
     warn,

     /// Describes messages indicating serious errors.
     error,
  }

  /// Emit a log message.
  ///
  /// A log message has a `level` describing what kind of message is being sent,
  /// a context, which is an uninterpreted string meant to help consumers group
  /// similar messages, and a string containing the message text.
  log: func(level: level, context: string, message: string)
}


/// # WASI Random API
///
/// WASI Random is a random data API.
///
/// It is intended to be portable at least between Unix-family platforms and
/// Windows.
interface wasi-random {
  /// Return `len` random bytes.
  ///
  /// This function must produce data from an adaquately seeded CSPRNG, so it
  /// must not block, and the returned data is always unpredictable.
  ///
  /// Deterministic environments must omit this function, rather than
  /// implementing it with deterministic data.
  getrandom: func(len: u32) -> list<u8>

  /// A value containing 128 random bits.
  ///
  /// This is a value import, which means it only provides one value, rather
  /// than being a function that could be called multiple times. This is intented
  /// to be used by source languages to initialize hash-maps without needing the
  /// full `getrandom` API.
  ///
  /// This value is not required to be computed from a CSPRNG, and may even be
  /// entirely deterministic. Host implementatations are encouraged to provide
  /// random values to any program exposed to attacker-controlled content, to
  /// enable DoS protection built into many languages' hash-map implementations.
  insecure-random: tuple<u64, u64>
}

/// # WASI Filesystem API
///
/// WASI filesystem is a filesystem API primarily intended to let users run WASI
/// programs that access their files on their existing filesystems, without
/// significant overhead.
///
/// It is intended to be roughly portable between Unix-family platforms and
/// Windows, though it does not hide many of the major differences.
///
/// Paths are passed as interface-type `string`s, meaning they must consist of
/// a sequence of Unicode Scalar Values (USVs). Some filesystems may contain paths
/// which are not accessible by this API.
///
/// Some of the content and ideas here are derived from
/// [CloudABI](https://github.com/NuxiNL/cloudabi).
interface wasi-filesystem {
  /// A "file" descriptor. In the future, this will be replaced by handle types.
  type descriptor = u32

  /// Size of a range of bytes in memory.
  type size = u32

  /// Non-negative file size or length of a region within a file.
  type filesize = u64

  /// Relative offset within a file.
  type filedelta = s64

  /// Timestamp in nanoseconds.
  ///
  /// TODO: wasi-clocks is moving to seconds+nanoseconds.
  type timestamp = u64

  /// The type of a filesystem object referenced by a descriptor.
  ///
  /// Note: This was called `filetype` in earlier versions of WASI.
  enum descriptor-type {
      /// The type of the descriptor or file is unknown or is different from
      /// any of the other types specified.
      unknown,
      /// The descriptor refers to a block device inode.
      block-device,
      /// The descriptor refers to a character device inode.
      character-device,
      /// The descriptor refers to a directory inode.
      directory,
      /// The descriptor refers to a named pipe.
      fifo,
      /// The file refers to a symbolic link inode.
      symbolic-link,
      /// The descriptor refers to a regular file inode.
      regular-file,
      /// The descriptor refers to a socket.
      socket,
  }

  /// Descriptor flags.
  ///
  /// Note: This was called `fdflags` in earlier versions of WASI.
  flags descriptor-flags {
      /// Read mode: Data can be read.
      read,
      /// Write mode: Data can be written to.
      write,
      /// Append mode: Data written to the file is always appended to the file's
      /// end.
      append,
      /// Write according to synchronized I/O data integrity completion. Only the
      /// data stored in the file is synchronized.
      dsync,
      /// Non-blocking mode.
      nonblock,
      /// Synchronized read I/O operations.
      rsync,
      /// Write according to synchronized I/O file integrity completion. In
      /// addition to synchronizing the data stored in the file, the
      /// implementation may also synchronously update the file's metadata.
      sync,
  }

  /// File attributes.
  ///
  /// Note: This was called `filestat` in earlier versions of WASI.
  record descriptor-stat {
      /// Device ID of device containing the file.
      dev: device,
      /// File serial number.
      ino: inode,
      /// File type.
      %type: descriptor-type,
      /// Number of hard links to the file.
      nlink: linkcount,
      /// For regular files, the file size in bytes. For symbolic links, the length
      /// in bytes of the pathname contained in the symbolic link.
      size: filesize,
      /// Last data access timestamp.
      atim: timestamp,
      /// Last data modification timestamp.
      mtim: timestamp,
      /// Last file status change timestamp.
      ctim: timestamp,
  }

  /// Flags determining the method of how paths are resolved.
  flags at-flags {
      /// As long as the resolved path corresponds to a symbolic link, it is expanded.
      symlink-follow,
  }

  /// Open flags used by `open-at`.
  flags o-flags {
      /// Create file if it does not exist.
      create,
      /// Fail if not a directory.
      directory,
      /// Fail if file already exists.
      excl,
      /// Truncate file to size 0.
      trunc,
  }

  /// Permissions mode used by `open-at`, `change-permissions-at`, and similar.
  flags mode {
      /// True if the resource is considered readable by the containing
      /// filesystem.
      readable,
      /// True if the resource is considered writeable by the containing
      /// filesystem.
      writeable,
      /// True if the resource is considered executable by the containing
      /// filesystem. This does not apply to directories.
      executable,
  }

  /// Number of hard links to an inode.
  type linkcount = u64

  /// Identifier for a device containing a file system. Can be used in combination
  /// with `inode` to uniquely identify a file or directory in the filesystem.
  type device = u64

  /// Filesystem object serial number that is unique within its file system.
  type inode = u64

  /// When setting a timestamp, this gives the value to set it to.
  variant new-timestamp {
      /// Leave the timestamp set to its previous value.
      no-change,
      /// Set the timestamp to the current time of the system clock associated
      /// with the filesystem.
      now,
      /// Set the timestamp to the given value.
      timestamp(timestamp),
  }

  /// A directory entry.
  record dirent {
      /// The serial number of the file referred to by this directory entry.
      ino: inode,
      /// The length of the name of the directory entry.
      namelen: size,
      /// The type of the file referred to by this directory entry.
      %type: descriptor-type,
  }

  /// Error codes returned by functions.
  /// Not all of these error codes are returned by the functions provided by this
  /// API; some are used in higher-level library layers, and others are provided
  /// merely for alignment with POSIX.
  enum errno {
      /// Argument list too long. This is similar to `E2BIG` in POSIX.
      toobig,
      /// Permission denied.
      access,
      /// Address in use.
      addrinuse,
      /// Address not available.
      addrnotavail,
      /// Address family not supported.
      afnosupport,
      /// Resource unavailable, or operation would block.
      again,
      /// Connection already in progress.
      already,
      /// Bad message.
      badmsg,
      /// Device or resource busy.
      busy,
      /// Operation canceled.
      canceled,
      /// No child processes.
      child,
      /// Connection aborted.
      connaborted,
      /// Connection refused.
      connrefused,
      /// Connection reset.
      connreset,
      /// Resource deadlock would occur.
      deadlk,
      /// Destination address required.
      destaddrreq,
      /// Storage quota exceeded.
      dquot,
      /// File exists.
      exist,
      /// Bad address.
      fault,
      /// File too large.
      fbig,
      /// Host is unreachable.
      hostunreach,
      /// Identifier removed.
      idrm,
      /// Illegal byte sequence.
      ilseq,
      /// Operation in progress.
      inprogress,
      /// Interrupted function.
      intr,
      /// Invalid argument.
      inval,
      /// I/O error.
      io,
      /// Socket is connected.
      isconn,
      /// Is a directory.
      isdir,
      /// Too many levels of symbolic links.
      loop,
      /// File descriptor value too large.
      mfile,
      /// Too many links.
      mlink,
      /// Message too large.
      msgsize,
      /// Multihop attempted.
      multihop,
      /// Filename too long.
      nametoolong,
      /// Network is down.
      netdown,
      /// Connection aborted by network.
      netreset,
      /// Network unreachable.
      netunreach,
      /// Too many files open in system.
      nfile,
      /// No buffer space available.
      nobufs,
      /// No such device.
      nodev,
      /// No such file or directory.
      noent,
      /// Executable file format error.
      noexec,
      /// No locks available.
      nolck,
      /// Link has been severed.
      nolink,
      /// Not enough space.
      nomem,
      /// No message of the desired type.
      nomsg,
      /// Protocol not available.
      noprotoopt,
      /// No space left on device.
      nospc,
      /// Function not supported.
      nosys,
      /// Not a directory or a symbolic link to a directory.
      notdir,
      /// Directory not empty.
      notempty,
      /// State not recoverable.
      notrecoverable,
      /// Not supported, or operation not supported on socket.
      notsup,
      /// Inappropriate I/O control operation.
      notty,
      /// No such device or address.
      nxio,
      /// Value too large to be stored in data type.
      overflow,
      /// Previous owner died.
      ownerdead,
      /// Operation not permitted.
      perm,
      /// Broken pipe.
      pipe,
      /// Result too large.
      range,
      /// Read-only file system.
      rofs,
      /// Invalid seek.
      spipe,
      /// No such process.
      srch,
      /// Stale file handle.
      stale,
      /// Connection timed out.
      timedout,
      /// Text file busy.
      txtbsy,
      /// Cross-device link.
      xdev,
  }

  /// File or memory access pattern advisory information.
  enum advice {
      /// The application has no advice to give on its behavior with respect to the specified data.
      normal,
      /// The application expects to access the specified data sequentially from lower offsets to higher offsets.
      sequential,
      /// The application expects to access the specified data in a random order.
      random,
      /// The application expects to access the specified data in the near future.
      will-need,
      /// The application expects that it will not access the specified data in the near future.
      dont-need,
      /// The application expects to access the specified data once and then not reuse it thereafter.
      no-reuse,
  }

  /// The position relative to which to set the offset of the descriptor.
  variant seek-from {
      /// Seek relative to start-of-file.
      set(filesize),
      /// Seek relative to current position.
      cur(filedelta),
      /// Seek relative to end-of-file.
      end(filesize),
  }

  /// Provide file advisory information on a descriptor.
  ///
  /// This is similar to `posix_fadvise` in POSIX.
  fadvise: func(
      /// The resource to operate on.
      fd: descriptor,
      /// The offset within the file to which the advisory applies.
      offset: filesize,
      /// The length of the region to which the advisory applies.
      len: filesize,
      /// The advice.
      advice: advice
  ) -> result<_, errno>

  /// Force the allocation of space in a file.
  ///
  /// Note: This is similar to `posix_fallocate` in POSIX.
  fallocate: func(
      /// The resource to operate on.
      fd: descriptor,
      /// The offset at which to start the allocation.
      offset: filesize,
      /// The length of the area that is allocated.
      len: filesize
  ) -> result<_, errno>

  /// Synchronize the data of a file to disk.
  ///
  /// Note: This is similar to `fdatasync` in POSIX.
  datasync: func(
      /// The resource to operate on.
      fd: descriptor,
  ) -> result<_, errno>

  /// Get flags associated with a descriptor.
  ///
  /// Note: This returns similar flags to `fcntl(fd, F_GETFL)` in POSIX.
  ///
  /// Note: This returns the value that was the `fs_flags` value returned
  /// from `fdstat_get` in earlier versions of WASI.
  %flags: func(
      /// The resource to operate on.
      fd: descriptor,
  ) -> result<descriptor-flags, errno>

  /// Get the dynamic type of a descriptor.
  ///
  /// Note: This returns the same value as the `type` field of the `descriptor-stat`
  /// returned by `stat`, `stat-at` and similar.
  ///
  /// Note: This returns similar flags to the `st_mode & S_IFMT` value provided
  /// by `fstat` in POSIX.
  ///
  /// Note: This returns the value that was the `fs_filetype` value returned
  /// from `fdstat_get` in earlier versions of WASI.
  ///
  /// TODO: Remove the `todo-` when wit-bindgen is updated.
  %todo-type: func(
      /// The resource to operate on.
      fd: descriptor,
  ) -> result<descriptor-type, errno>

  /// Set flags associated with a descriptor.
  ///
  /// Note: This is similar to `fcntl(fd, F_SETFL, flags)` in POSIX.
  ///
  /// Note: This was called `fd_fdstat_set_flags` in earlier versions of WASI.
  set-flags: func(
      /// The resource to operate on.
      fd: descriptor,
      /// The new flags.
      %flags: descriptor-flags
  ) -> result<_, errno>

  /// Adjust the size of an open file. If this increases the file's size, the
  /// extra bytes are filled with zeros.
  ///
  /// Note: This was called `fd_filestat_set_size` in earlier versions of WASI.
  set-size: func(
      /// The resource to operate on.
      fd: descriptor,
      size: filesize
  ) -> result<_, errno>

  /// Adjust the timestamps of an open file or directory.
  ///
  /// Note: This is similar to `futimens` in POSIX.
  ///
  /// Note: This was called `fd_filestat_set_times` in earlier versions of WASI.
  set-times: func(
      /// The resource to operate on.
      fd: descriptor,
      /// The desired values of the data access timestamp.
      atim: new-timestamp,
      /// The desired values of the data modification timestamp.
      mtim: new-timestamp,
  ) -> result<_, errno>

  /// Read from a descriptor, without using and updating the descriptor's offset.
  ///
  /// Note: This is similar to `pread` in POSIX.
  pread: func(
      /// The resource to operate on.
      fd: descriptor,
      /// The maximum number of bytes to read.
      len: size,
      /// The offset within the file at which to read.
      offset: filesize,
  ) -> result<list<u8>, errno>

  /// Write to a descriptor, without using and updating the descriptor's offset.
  ///
  /// Note: This is similar to `pwrite` in POSIX.
  pwrite: func(
      /// The resource to operate on.
      fd: descriptor,
      /// Data to write
      buf: list<u8>,
      /// The offset within the file at which to write.
      offset: filesize,
  ) -> result<size, errno>

  /// Read directory entries from a directory.
  ///
  /// TODO this shouldnt be a binary interface. Instead, define the struct
  /// and whatever of its members are required here, and then return a list
  /// of those structs. Delete the rewind argument.
  ///
  /// When successful, the contents of the output buffer consist of a sequence of
  /// directory entries. Each directory entry consists of a `dirent` object,
  /// followed by `dirent::d_namlen` bytes holding the name of the directory
  /// entry.
  ///
  /// This function fills the output buffer as much as possible, potentially
  /// truncating the last directory entry. This allows the caller to grow its
  /// read buffer size in case it's too small to fit a single large directory
  /// entry, or skip the oversized directory entry.
  readdir: func(
      /// The resource to operate on.
      fd: descriptor,
      /// If true, rewind the current position to the beginning before reading.
      rewind: bool
  ) -> result<list<u8>, errno>

  /// Move the offset of a descriptor.
  ///
  /// The meaning of `seek` on a directory is unspecified.
  ///
  /// Returns new offset of the descriptor, relative to the start of the file.
  ///
  /// Note: This is similar to `lseek` in POSIX.
  seek: func(
      /// The resource to operate on.
      fd: descriptor,
      /// The method to compute the new offset.
      %from: seek-from,
  ) -> result<filesize, errno>

  /// Synchronize the data and metadata of a file to disk.
  ///
  /// Note: This is similar to `fsync` in POSIX.
  sync: func(
      /// The resource to operate on.
      fd: descriptor,
  ) -> result<_, errno>

  /// Return the current offset of a descriptor.
  ///
  /// Returns the current offset of the descriptor, relative to the start of the file.
  ///
  /// Note: This is similar to `lseek(fd, 0, SEEK_CUR)` in POSIX.
  tell: func(
      /// The resource to operate on.
      fd: descriptor,
  ) -> result<filesize, errno>

  /// Create a directory.
  ///
  /// Note: This is similar to `mkdirat` in POSIX.
  create-directory-at: func(
      /// The resource to operate on.
      fd: descriptor,
      /// The relative path at which to create the directory.
      path: string,
  ) -> result<_, errno>

  /// Return the attributes of an open file or directory.
  ///
  /// Note: This is similar to `fstat` in POSIX.
  ///
  /// Note: This was called `fd_filestat_get` in earlier versions of WASI.
  stat: func(
      /// The resource to operate on.
      fd: descriptor,
  ) -> result<descriptor-stat, errno>

  /// Return the attributes of a file or directory.
  ///
  /// Note: This is similar to `fstatat` in POSIX.
  ///
  /// Note: This was called `fd_filestat_get` in earlier versions of WASI.
  stat-at: func(
      /// The resource to operate on.
      fd: descriptor,
      /// Flags determining the method of how the path is resolved.
      at-flags: at-flags,
      /// The relative path of the file or directory to inspect.
      path: string,
  ) -> result<descriptor-stat, errno>

  /// Adjust the timestamps of a file or directory.
  ///
  /// Note: This is similar to `utimensat` in POSIX.
  ///
  /// Note: This was called `path_filestat_set_times` in earlier versions of WASI.
  set-times-at: func(
      /// The resource to operate on.
      fd: descriptor,
      /// Flags determining the method of how the path is resolved.
      at-flags: at-flags,
      /// The relative path of the file or directory to operate on.
      path: string,
      /// The desired values of the data access timestamp.
      atim: new-timestamp,
      /// The desired values of the data modification timestamp.
      mtim: new-timestamp,
  ) -> result<_, errno>

  /// Create a hard link.
  ///
  /// Note: This is similar to `linkat` in POSIX.
  link-at: func(
      /// The resource to operate on.
      fd: descriptor,
      /// Flags determining the method of how the path is resolved.
      old-at-flags: at-flags,
      /// The relative source path from which to link.
      old-path: string,
      /// The base directory for `new-path`.
      new-descriptor: descriptor,
      /// The relative destination path at which to create the hard link.
      new-path: string,
  ) -> result<_, errno>

  /// Open a file or directory.
  ///
  /// The returned descriptor is not guaranteed to be the lowest-numbered
  /// descriptor not currently open/ it is randomized to prevent applications
  /// from depending on making assumptions about indexes, since this is
  /// error-prone in multi-threaded contexts. The returned descriptor is
  /// guaranteed to be less than 2**31.
  ///
  /// Note: This is similar to `openat` in POSIX.
  open-at: func(
      /// The resource to operate on.
      fd: descriptor,
      /// Flags determining the method of how the path is resolved.
      at-flags: at-flags,
      /// The relative path of the object to open.
      path: string,
      /// The method by which to open the file.
      o-flags: o-flags,
      /// Flags to use for the resulting descriptor.
      %flags: descriptor-flags,
      /// Permissions to use when creating a new file.
      mode: mode
  ) -> result<descriptor, errno>

  /// Read the contents of a symbolic link.
  ///
  /// Note: This is similar to `readlinkat` in POSIX.
  readlink-at: func(
      /// The resource to operate on.
      fd: descriptor,
      /// The relative path of the symbolic link from which to read.
      path: string,
  ) -> result<string, errno>

  /// Remove a directory.
  ///
  /// Return `errno::notempty` if the directory is not empty.
  ///
  /// Note: This is similar to `unlinkat(fd, path, AT_REMOVEDIR)` in POSIX.
  remove-directory-at: func(
      /// The resource to operate on.
      fd: descriptor,
      /// The relative path to a directory to remove.
      path: string,
  ) -> result<_, errno>

  /// Rename a filesystem object.
  ///
  /// Note: This is similar to `renameat` in POSIX.
  rename-at: func(
      /// The resource to operate on.
      fd: descriptor,
      /// The relative source path of the file or directory to rename.
      old-path: string,
      /// The base directory for `new-path`.
      new-descriptor: descriptor,
      /// The relative destination path to which to rename the file or directory.
      new-path: string,
  ) -> result<_, errno>

  /// Create a symbolic link.
  ///
  /// Note: This is similar to `symlinkat` in POSIX.
  symlink-at: func(
      /// The resource to operate on.
      fd: descriptor,
      /// The contents of the symbolic link.
      old-path: string,
      /// The relative destination path at which to create the symbolic link.
      new-path: string,
  ) -> result<_, errno>

  /// Unlink a filesystem object that is not a directory.
  ///
  /// Return `errno::isdir` if the path refers to a directory.
  /// Note: This is similar to `unlinkat(fd, path, 0)` in POSIX.
  unlink-file-at: func(
      /// The resource to operate on.
      fd: descriptor,
      /// The relative path to a file to unlink.
      path: string,
  ) -> result<_, errno>

  /// Change the permissions of a filesystem object that is not a directory.
  ///
  /// Note that the ultimate meanings of these permissions is
  /// filesystem-specific.
  ///
  /// Note: This is similar to `fchmodat` in POSIX.
  change-file-permissions-at: func(
      /// The resource to operate on.
      fd: descriptor,
      /// Flags determining the method of how the path is resolved.
      at-flags: at-flags,
      /// The relative path to operate on.
      path: string,
      /// The new permissions for the filesystem object.
      mode: mode,
  ) -> result<_, errno>

  /// Change the permissions of a directory.
  ///
  /// Note that the ultimate meanings of these permissions is
  /// filesystem-specific.
  ///
  /// Unlike in POSIX, the `executable` flag is not reinterpreted as a "search"
  /// flag. `read` on a directory implies readability and searchability, and
  /// `execute` is not valid for directories.
  ///
  /// Note: This is similar to `fchmodat` in POSIX.
  change-directory-permissions-at: func(
      /// The resource to operate on.
      fd: descriptor,
      /// Flags determining the method of how the path is resolved.
      at-flags: at-flags,
      /// The relative path to operate on.
      path: string,
      /// The new permissions for the directory.
      mode: mode,
  ) -> result<_, errno>
}

/// # WASI Poll API
///
/// WASI Poll is a poll API intended to let users wait for I/O events on
/// multiple handles at once.
interface wasi-poll {
  /// An asynchronous operation. In the future, this will be replaced by a handle type.
  type wasi-future = u32

  /// Dispose of the specified future, after which it may no longer be used.
  drop-future: func(f: wasi-future)

  /// Poll for completion on a set of futures.
  ///
  /// The "oneoff" in the name refers to the fact that this function must do a
  /// linear scan through the entire list of subscriptions, which may be
  /// inefficient if the number is large and the same subscriptions are used
  /// many times. In the future, it may be accompanied by an API similar to
  /// Linux's `epoll` which allows sets of subscriptions to be registered and
  /// made efficiently reusable.
  ///
  /// Note that the return type would ideally be `list<bool>`, but that would
  /// be more difficult to polyfill given the current state of `wit-bindgen`.
  /// See https://github.com/bytecodealliance/preview2-prototyping/pull/11#issuecomment-1329873061
  /// for details.  For now, we use zero to mean "not ready" and non-zero to
  /// mean "ready".
  poll-oneoff: func(in: list<wasi-future>) -> list<u8>
}

interface wasi-tcp {
  /// A socket pseudo-handle. In the future, this will be replaced by a handle type.
  type socket = u32

  /// An asynchronous operation. In the future, this will be replaced by a handle type.
  // TODO: `use` the `wasi-poll` version
  type wasi-future = u32

  /// Errors which may be encountered when performing socket-related operations
  // TODO: expand this list
  enum error {
      connection-aborted,
      connection-refused,
      connection-reset,
      host-unreachable,
      network-down,
      network-unreachable,
      timeout
  }

  /// Result of querying bytes readable or writable for a `socket`
  record bytes-result {
      /// Indicates the number of bytes readable or writable for a still-open socket
      nbytes: u64,
      /// Indicates whether the other end of the stream has disconnected, in which case
      /// no further data will be received (when reading) or accepted (when writing) on
      /// this stream.
      is-closed: bool
  }

  /// Query the specified `socket` for how many bytes are available to read.
  bytes-readable: func(s: socket) -> result<bytes-result, error>

  /// Query the specified `socket` for the number of bytes ready to be accepted.
  bytes-writable: func(s: socket) -> result<bytes-result, error>

  /// Create a future which will resolve once either the specified socket has bytes
  /// available to read or the other end of the stream has been closed.
  subscribe-read: func(s: socket) -> wasi-future

  /// Create a future which will resolve once either the specified socket is ready
  /// to accept bytes or the other end of the stream has been closed.
  subscribe-write: func(s: socket) -> wasi-future
}

world wasi {
  import wasi-clocks: wasi-clocks
  import wasi-default-clocks: wasi-default-clocks
  import wasi-logging: wasi-logging
  import wasi-filesystem: wasi-filesystem
  import wasi-random: wasi-random
  import wasi-poll: wasi-poll
  import wasi-tcp: wasi-tcp

  default export command
}
