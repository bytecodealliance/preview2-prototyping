
default interface wasi-udp {
	use pkg.wasi-poll.{pollable}
	use pkg.wasi-network.{network, error, ip-address-family}

        // TODO: For now, duplicate the types of these to work around a bug
        // in wit-bindgen-0.3.0 which causes the bindings to reference
        // `Ipv4SocketAddress` and `Ipv6SocketAddress without them being in
        // scope. This bug is fixed in newer versions.
	type ipv4-address = tuple<u8, u8, u8, u8>
	type ipv6-address = tuple<u16, u16, u16, u16, u16, u16, u16, u16>
	variant ip-address {
		ipv4(ipv4-address),
		ipv6(ipv6-address),
	}
	record ipv4-socket-address {
		port: u16, // sin_port
		address: ipv4-address, // sin_addr
	}
	record ipv6-socket-address {
		port: u16, // sin6_port
		flow-info: u32, // sin6_flowinfo
		address: ipv6-address, // sin6_addr
		scope-id: u32, // sin6_scope_id
	}
	variant ip-socket-address {
		ipv4(ipv4-socket-address),
		ipv6(ipv6-socket-address),
	}

	record datagram {
		data: list<u8>, // Theoretical max size: ~64 KiB. In practice, typically less than 1500 bytes.
		remote-address: ip-socket-address,

		/// Possible future additions:
		/// local-address: ip-socket-address, // IP_PKTINFO / IP_RECVDSTADDR / IPV6_PKTINFO
		/// local-interface: u32, // IP_PKTINFO / IP_RECVIF
		/// ttl: u8, // IP_RECVTTL
		/// dscp: u6, // IP_RECVTOS
		/// ecn: u2, // IP_RECVTOS
	}

	/// A UDP socket handle.
    type udp-socket = u32

	/// Create a new UDP socket.
	/// 
	/// Similar to `socket(AF_INET or AF_INET6, SOCK_DGRAM, IPPROTO_UDP)` in POSIX.
	/// 
	/// References:
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html
	/// - https://man7.org/linux/man-pages/man2/socket.2.html
	/// 
	create-udp-socket: func(network: network, address-family: ip-address-family) -> result<udp-socket, error>

	/// Dispose of the specified `udp-socket`, after which it may no longer be used.
	drop-udp-socket: func(this: udp-socket)

	/// Bind the socket to a specific IP address and port.
	///
	/// If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which
	/// network interface(s) to bind to.
	/// If the TCP/UDP port is zero, the socket will be bound to a random free port.
	/// 
	/// When a socket is not explicitly bound, the first invocation to a send or receive operation will
	/// implicitly bind the socket.
	/// 
	/// Returns an error if the socket is already bound.
	/// 
	/// TODO: disallow wildcard binds as long as there isn't a way to pass the local address to send & receive?
	/// - https://blog.cloudflare.com/everything-you-ever-wanted-to-know-about-udp-sockets-but-were-afraid-to-ask-part-1/#sourcing-packets-from-a-wildcard-socket
	/// - https://blog.powerdns.com/2012/10/08/on-binding-datagram-udp-sockets-to-the-any-addresses/
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html
	/// - https://man7.org/linux/man-pages/man2/bind.2.html
	bind: func(this: udp-socket, local-address: ip-socket-address) -> result<_, error>

	/// Get the current bound address.
	/// 
	/// Returns an error if the socket is not bound.
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html
	/// - https://man7.org/linux/man-pages/man2/getsockname.2.html
	local-address: func(this: udp-socket) -> result<ip-socket-address, error>

	/// receive a message.
	/// 
	/// Returns:
	/// - The sender address of the datagram
	/// - The number of bytes read.
	/// - When the received datagram is larger than the provided buffers,
	///     the excess data is lost and the `truncated` flag will be set.
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvfrom.html
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvmsg.html
	/// - https://man7.org/linux/man-pages/man2/recv.2.html
	receive: func(this: udp-socket) -> result<datagram, error>

	/// send a message to a specific destination address.
	/// 
	/// The remote address option is required. To send a message to the "connected" peer,
	/// call `remote-address` to get their address.
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendto.html
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendmsg.html
	/// - https://man7.org/linux/man-pages/man2/send.2.html
	send: func(this: udp-socket, datagram: datagram) -> result<_, error>

	/// Set the destination address.
	/// 
	/// When a destination address is set:
	/// - all receive operations will only return datagrams sent from the provided `remote-address`.
	/// - the `send` function can still be used to send to any other destination, however you can't receive their response.
	/// 
	/// Similar to `connect(sock, ...)` in POSIX.
	/// 
	/// Note that this function does not generate any network traffic and the peer is not aware of this "connection".
	/// 
	/// TODO: "connect" is a rather odd name for this function because it doesn't reflect what's actually happening.
	///     Feels like it was chosen just to shoehorn UDP into the existing Socket interface.
	///     Do we have to keep this name?
	/// 
	/// TODO: add unconnect ability.
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html
	/// - https://man7.org/linux/man-pages/man2/connect.2.html
	connect: func(this: udp-socket, remote-address: ip-socket-address) -> result<_, error>

	/// Get the address set with `connect`.
	/// 
	/// References
	/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html
	/// - https://man7.org/linux/man-pages/man2/getpeername.2.html
	remote-address: func(this: udp-socket) -> result<ip-socket-address, error>

	/// The kernel buffer space reserved for sends/receives on this socket.
	/// 
	/// Note #1: an implementation may choose to cap or round the buffer size when setting the value.
	/// 	In other words, after setting a value, reading the same setting back may return a different value.
	/// 
	/// Note #2: there is not necessarily a direct relationship between the kernel buffer size and the bytes of
	/// 	actual data to be sent/received by the application, because the kernel might also use the buffer space
	/// 	for internal metadata structures.
	/// 
	/// Fails when this socket is in the Listening state.
	/// 
	/// Equivalent to the SO_RCVBUF and SO_SNDBUF socket options.
	receive-buffer-size: func(this: udp-socket) -> result<u64, error>
	set-receive-buffer-size: func(this: udp-socket, value: u64) -> result<_, error>
	send-buffer-size: func(this: udp-socket) -> result<u64, error>
	set-send-buffer-size: func(this: udp-socket, value: u64) -> result<_, error>

	/// Whether this is a IPv4 or IPv6 socket.
	/// 
	/// Equivalent to the SO_DOMAIN socket option.
	address-family: func(this: udp-socket) -> ip-address-family

	/// Equivalent to the IP_TTL & IPV6_UNICAST_HOPS socket options.
	unicast-hop-limit: func(this: udp-socket) -> result<u8, error>
	set-unicast-hop-limit: func(this: udp-socket, value: u8) -> result<_, error>

	/// Whether IPv4 compatibility (dual-stack) mode is disabled or not.
	/// Implementations are not required to support dual-stack mode, so calling `set-ipv6-only(false)` might fail.
	/// 
	/// Fails when called on an IPv4 socket.
	/// 
	/// Equivalent to the IPV6_V6ONLY socket option.
	ipv6-only: func(this: udp-socket) -> result<bool, error>
	set-ipv6-only: func(this: udp-socket, value: bool) -> result<_, error>


	/// Get/set the blocking mode of the socket.
	/// 
	/// By default a socket is in "blocking" mode, meaning that any function blocks and waits for its completion.
	/// When switched to "non-blocking" mode, operations that would block return an `again` error. After which
	/// the API consumer is expected to call `subscribe` and wait for completion using the wasi-poll module.
	/// 
	/// Note: these functions are here for WASI Preview2 only.
	/// They're planned to be removed when `async` is natively supported in Preview3.
	non-blocking: func(this: udp-socket) -> result<bool, error>
	set-non-blocking: func(this: udp-socket, value: bool) -> result<_, error>

	/// Create a `pollable` which will resolve once the socket is ready for I/O.
	/// 
	/// Note: this function is here for WASI Preview2 only.
	/// It's planned to be removed when `async` is natively supported in Preview3.
	subscribe: func(this: udp-socket) -> pollable
}
